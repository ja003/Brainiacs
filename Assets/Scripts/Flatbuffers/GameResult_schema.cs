// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct GameResultInfoS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GameResultInfoS GetRootAsGameResultInfoS(ByteBuffer _bb) { return GetRootAsGameResultInfoS(_bb, new GameResultInfoS()); }
  public static GameResultInfoS GetRootAsGameResultInfoS(ByteBuffer _bb, GameResultInfoS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameResultInfoS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayTime { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public PlayerResultInfoS? PlayerResults(int j) { int o = __p.__offset(6); return o != 0 ? (PlayerResultInfoS?)(new PlayerResultInfoS()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayerResultsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameResultInfoS> CreateGameResultInfoS(FlatBufferBuilder builder,
      int playTime = 0,
      VectorOffset playerResultsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    GameResultInfoS.AddPlayerResults(builder, playerResultsOffset);
    GameResultInfoS.AddPlayTime(builder, playTime);
    return GameResultInfoS.EndGameResultInfoS(builder);
  }

  public static void StartGameResultInfoS(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayTime(FlatBufferBuilder builder, int playTime) { builder.AddInt(0, playTime, 0); }
  public static void AddPlayerResults(FlatBufferBuilder builder, VectorOffset playerResultsOffset) { builder.AddOffset(1, playerResultsOffset.Value, 0); }
  public static VectorOffset CreatePlayerResultsVector(FlatBufferBuilder builder, Offset<PlayerResultInfoS>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlayerResultsVectorBlock(FlatBufferBuilder builder, Offset<PlayerResultInfoS>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPlayerResultsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameResultInfoS> EndGameResultInfoS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameResultInfoS>(o);
  }
};

public struct PlayerResultInfoS : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlayerResultInfoS GetRootAsPlayerResultInfoS(ByteBuffer _bb) { return GetRootAsPlayerResultInfoS(_bb, new PlayerResultInfoS()); }
  public static PlayerResultInfoS GetRootAsPlayerResultInfoS(ByteBuffer _bb, PlayerResultInfoS obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerResultInfoS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Number { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Color { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Hero { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Kills { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Deaths { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PlayerResultInfoS> CreatePlayerResultInfoS(FlatBufferBuilder builder,
      int number = 0,
      StringOffset nameOffset = default(StringOffset),
      int color = 0,
      int hero = 0,
      int kills = 0,
      int deaths = 0) {
    builder.StartTable(6);
    PlayerResultInfoS.AddDeaths(builder, deaths);
    PlayerResultInfoS.AddKills(builder, kills);
    PlayerResultInfoS.AddHero(builder, hero);
    PlayerResultInfoS.AddColor(builder, color);
    PlayerResultInfoS.AddName(builder, nameOffset);
    PlayerResultInfoS.AddNumber(builder, number);
    return PlayerResultInfoS.EndPlayerResultInfoS(builder);
  }

  public static void StartPlayerResultInfoS(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddNumber(FlatBufferBuilder builder, int number) { builder.AddInt(0, number, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, int color) { builder.AddInt(2, color, 0); }
  public static void AddHero(FlatBufferBuilder builder, int hero) { builder.AddInt(3, hero, 0); }
  public static void AddKills(FlatBufferBuilder builder, int kills) { builder.AddInt(4, kills, 0); }
  public static void AddDeaths(FlatBufferBuilder builder, int deaths) { builder.AddInt(5, deaths, 0); }
  public static Offset<PlayerResultInfoS> EndPlayerResultInfoS(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PlayerResultInfoS>(o);
  }
};

